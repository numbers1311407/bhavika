var BP = {
  scroller: null,
  pHeight: null,
  sWidth: null,
  pCount: null,
  currentProject: null,
  projectEls: null,
  projects: JSON.parse("<%= js_escape_html(flattened_projects.to_json) %>"),

  render: function(el, data, partialRender) {
    el.empty();
    $('#projectTmpl').tmpl(data).appendTo(el);

    if (!partialRender) { 
      el.data('rendered', true);

      $('.slide', el)
        .last().addClass('last').end()
        .first().addClass('current first');
    }
  },

  scrollTo: function(el, firstLoad, cb) {
    var pos = el.position(), t = pos.top - 25;

    // we don't animate on first load
    if (firstLoad) {
      BP.scroller.scrollTop(t);
      if (cb) cb();
    } else {
      BP.scroller.stop().animate({ scrollTop: t}, { 
        duration: <%= data.site.animation.speed %>, 
        easing: "<%= data.site.animation.easing %>", 
        complete: cb
      });
    }
  },

  getId: function() {
    var match, hash = window.location.hash;

    return hash && (match = hash.match(/\/([^$?]*)/)) && match[1] ||
        BP.projects[0].id;
  },

  getProjectData: function(id) {
    return id ? _.find(BP.projects, function(p) { return p.id == id }) : BP.projects[0];
  },

  animateOpacityTo: function(el) {
    $('.project img').stop().animate({opacity: 0.65}, 250, function() {
      $('img', el).stop().animate({opacity: 1}, 250);
    });
  },

  loadAllExcept: function(exceptId) {
    BP.projectEls = $('.project');
    BP.pHeight = BP.projectEls.outerHeight(true);
    BP.pCount  = BP.projectEls.length;
    BP.resize();

    _(BP.projects).chain()
      .filter(function(p) { return p.id != exceptId })
      .each(function(pData) {
        pData = _.clone(pData);
        if (pData.slides) { 
          pData.slides = pData.slides[0];
        }

        BP.render($('#'+pData.id), pData, true);
      });
  },

  _load: function(id, cb) {
    var firstLoad   = !BP.pCount,
        projectData = BP.getProjectData(id),
        projectEl   = $('#'+projectData.id);

    projectEl.siblings().removeClass('current');

    BP.animateOpacityTo(projectEl);

    if (!projectEl.data('rendered')) 
      BP.render(projectEl, projectData);

    if (firstLoad) BP.loadAllExcept(id);

    BP.scrollTo(projectEl, firstLoad, function() {
      // adjust current submenu
      $('#sub-nav li')
        .removeClass('current')
        .filter('.'+projectData.id).addClass('current');

      BP.currentProject = projectEl;
      BP.paginationClasses();
      projectEl.addClass('current')

      if (cb) cb();
    });
  },

  load: function() {
    BP._load(BP.getId());
  },

  _hScroll: function(dir) {
    return function() {
      if (BP.currentProject) {
        var target = BP.currentSlide()[dir]();

        if (target.length) {
          target.closest('.slides').animate({left: target.position().left * -1}, {
            duration: <%= data.site.animation.speed %>, 
            easing: "<%= data.site.animation.easing %>",
            complete: function() {
              target.addClass('current').siblings().removeClass('current');
              BP.paginationClasses(target);
            }
          });
        } else {
          console.log("No " + dir);
        }
      }
    }
  },

  currentSlide: function() {
    return $('.slide.current', BP.currentProject);
  },

  paginationClasses: function(target) {
    target = target || BP.currentSlide();

    BP.currentProject.toggleClass('first', target.hasClass('first'));
    BP.currentProject.toggleClass('last', target.hasClass('last'));
  },

  init: function() {

    $('.nav-left').live('click', function() {
      BP._hScroll('prev')();
    });

    $('.nav-right').live('click', function() {
      BP._hScroll('next')();
    });

    $(window).bind('hashchange', BP.load);
    $(window).resize(BP.resize);

    BP.scroller = $('#scroller');

    BP.load();
  },

  resize: function(inf) {
    $('#projects').height(
      $(window).height() - BP.pHeight + (BP.pHeight * BP.pCount)
    );
  }
}

$(BP.init);
